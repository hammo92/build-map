import { ContentTemplate } from "@components/contentTemplate";
import { ContentTemplateCard } from "@components/contentTemplate/contentTemplate-card";
import { ContentTemplateCreate } from "@components/contentTemplate/contentTemplate-create/contentTemplateCreate";
import { NavigationList } from "@components/navigation/linkList";
import { PageHeader } from "@components/ui/page-header";
import {
    useGetContentTemplate,
    useGetOrganisationContentTemplates,
} from "@data/contentTemplate/hooks";
import { faArrowLeft, faFile, faHouse, faUser } from "@fortawesome/pro-regular-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { ContentTemplate as ContentTemplateModel } from "@lib/contentTemplate/data/contentTemplate.model";
import {
    Box,
    Button,
    Center,
    Grid,
    Group,
    Loader,
    SegmentedControl,
    Stack,
    Text,
    useMantineTheme,
} from "@mantine/core";
import { params as cloudParams } from "@serverless/cloud";
import axios from "axios";
import camelcaseKeys from "camelcase-keys";
import { getCookie } from "cookies-next";
import { LayoutShellSideNav } from "layouts";
import { GetServerSidePropsContext } from "next";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { ReactElement, useState } from "react";
import { CleanedCamel } from "type-helpers";

interface ContentTemplateProps {
    contentTemplateId: string;
    organisationId: string;
    initialData: { contentTemplate: CleanedCamel<ContentTemplateModel> };
}

const HomeSidebar = () => {
    return (
        <NavigationList
            items={[
                {
                    link: "/home",
                    icon: faHouse,
                    text: "Home",
                },
                {
                    link: "/forms",
                    icon: faFile,
                    text: "Content Templates",
                    active: true,
                },
                {
                    link: "/users",
                    icon: faUser,
                    text: "Users",
                },
            ]}
        />
    );
};

function ContentTemplatePage({
    organisationId,
    initialData,
    contentTemplateId,
}: ContentTemplateProps) {
    const { data } = useGetContentTemplate(contentTemplateId, initialData);
    const router = useRouter();
    return (
        <>
            <Head>
                <title>Organisation Content Templates</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Stack spacing={0} sx={{ height: "100%" }} px="sm">
                <Group px="md" position="apart" sx={{ minHeight: "76px" }}>
                    <Button
                        variant="light"
                        onClick={() =>
                            router.push(router.asPath.substring(0, router.asPath.lastIndexOf("/")))
                        }
                    >
                        <Group>
                            <FontAwesomeIcon icon={faArrowLeft} />
                            <Text>Back to Templates</Text>
                        </Group>
                    </Button>
                </Group>
                <Box px="md">
                    <ContentTemplate
                        contentTemplate={data?.contentTemplate ?? initialData.contentTemplate}
                    />
                </Box>
            </Stack>
        </>
    );
}

ContentTemplatePage.getLayout = (page: ReactElement) => (
    <LayoutShellSideNav
        sidebarContent={<HomeSidebar />}
        headerProps={{ title: "Content Templates" }}
    >
        {page}
    </LayoutShellSideNav>
);

export async function getServerSideProps({
    params,
    req,
}: GetServerSidePropsContext<{ orgId: string; contentTemplateId: string }>) {
    const { orgId, contentTemplateId } = params!;
    const token = getCookie("token", { req });
    const { data } = await axios.get(
        `${cloudParams.CLOUD_URL}/contentTemplates/${contentTemplateId}`,
        {
            headers: {
                "Content-type": "application/json",
                Authorization: `Bearer ${token}`,
            },
        }
    );
    console.log("data :>> ", data);
    return {
        props: {
            contentTemplateId: params?.contentTemplateId,
            organisationId: params!.orgId,
            initialData: camelcaseKeys(data),
        },
    };
}

export default ContentTemplatePage;
