import { ContentTemplate } from "@components/contentTemplate";
import { ContentTemplateCard } from "@components/contentTemplate/contentTemplate-card";
import { ContentTemplateCreate } from "@components/contentTemplate/contentTemplate-create/contentTemplateCreate";
import { NavigationList } from "@components/navigation/linkList";
import { PageHeader } from "@components/ui/page-header";
import { useGetOrganisationContentTemplates } from "@data/contentTemplate/hooks";
import { faFile, faHouse, faUser } from "@fortawesome/pro-regular-svg-icons";
import { Box, Grid, Group, SegmentedControl } from "@mantine/core";
import { LayoutShellSideNav } from "layouts";
import { GetServerSidePropsContext } from "next";
import Head from "next/head";
import React, { ReactElement, useState } from "react";
import { params as cloudParams } from "@serverless/cloud";
import { getCookie } from "cookies-next";
import { apiClient } from "@data/config";
import { getOrganisationContentTemplates } from "@data/contentTemplate/queries";
import axios from "axios";
import camelcaseKeys from "camelcase-keys";
import { CleanedCamel } from "type-helpers";
import { ContentTemplate as ContentTemplateProps } from "@lib/contentTemplate/data/contentTemplate.model";

interface ContentTemplatePageProps {
    organisationId: string;
    initialData: { contentTemplates: CleanedCamel<ContentTemplateProps>[] };
}

const HomeSidebar = () => {
    return (
        <NavigationList
            items={[
                {
                    link: "/home",
                    icon: faHouse,
                    text: "Home",
                },
                {
                    link: "/forms",
                    icon: faFile,
                    text: "Content Templates",
                    active: true,
                },
                {
                    link: "/users",
                    icon: faUser,
                    text: "Users",
                },
            ]}
        />
    );
};

function ContentTemplatePage({
    organisationId,
    initialData,
}: ContentTemplatePageProps) {
    const { data } = useGetOrganisationContentTemplates(
        organisationId,
        initialData
    );
    const [type, setType] =
        useState<ContentTemplateProps["type"]>("collection");
    return (
        <>
            <Head>
                <title>Organisation Content Templates</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Group
                direction="column"
                grow
                spacing={0}
                sx={{ height: "100%" }}
                noWrap
            >
                <PageHeader title="Content Templates"></PageHeader>

                <Grid
                    sx={(theme) => ({
                        borderTop: `1px solid ${theme.colors.dark[6]}`,
                    })}
                    gutter="md"
                    mx={0}
                >
                    <Grid.Col
                        span={3}
                        sx={(theme) => ({
                            borderRight: `1px solid ${theme.colors.dark[6]}`,
                        })}
                        p={0}
                    >
                        <Group
                            position="apart"
                            px="md"
                            py="sm"
                            sx={(theme) => ({
                                borderBottom: `1px solid ${theme.colors.dark[6]}`,
                                background: theme.colors.dark[7],
                            })}
                        >
                            <SegmentedControl
                                data={[
                                    {
                                        value: "collection",
                                        label: "Templates",
                                    },
                                    {
                                        value: "component",
                                        label: "Components",
                                    },
                                ]}
                                value={type}
                                onChange={(
                                    value: ContentTemplateProps["type"]
                                ) => setType(value)}
                            />
                            <ContentTemplateCreate type={type} />
                        </Group>
                        <Group
                            px="md"
                            py="sm"
                            direction="column"
                            grow
                            spacing="sm"
                        >
                            {data?.contentTemplates?.length
                                ? data.contentTemplates
                                      .filter(
                                          (template) => template.type === type
                                      )
                                      .map((contentTemplate, i) => (
                                          <ContentTemplateCard
                                              key={contentTemplate.id}
                                              contentTemplate={contentTemplate}
                                          />
                                      ))
                                : "No content templates Found"}
                        </Group>
                    </Grid.Col>
                    <Grid.Col span={9} px="md" py="sm">
                        <ContentTemplate />
                    </Grid.Col>
                </Grid>
            </Group>
        </>
    );
}

ContentTemplatePage.getLayout = (page: ReactElement) => (
    <LayoutShellSideNav
        sidebarContent={<HomeSidebar />}
        headerProps={{ title: "Content Templates" }}
    >
        {page}
    </LayoutShellSideNav>
);

export async function getServerSideProps({
    params,
    req,
}: GetServerSidePropsContext<{ orgId: string }>) {
    const { orgId } = params!;
    const token = getCookie("token", { req });
    const { data } = await axios.get(
        `${cloudParams.CLOUD_URL}/organisations/${orgId}/contentTemplates`,
        {
            headers: {
                "Content-type": "application/json",
                Authorization: `Bearer ${token}`,
            },
        }
    );
    return {
        props: {
            organisationId: params!.orgId,
            initialData: camelcaseKeys(data),
        },
    };
}

export default ContentTemplatePage;
